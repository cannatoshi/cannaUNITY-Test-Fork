# Generated by Django 5.2.1 on 2025-05-12 18:14

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('members', '0010_member_hourly_wage_member_max_working_hours_and_more'),
        ('rooms', '0004_alter_room_options_alter_roomitemtype_options_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='ControllerLog',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('controller_type', models.CharField(max_length=50, verbose_name='Controller-Typ')),
                ('controller_id', models.UUIDField(verbose_name='Controller-ID')),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Zeitstempel')),
                ('action_type', models.CharField(help_text='z.B. irrigation_start, light_change, error, etc.', max_length=100, verbose_name='Aktionstyp')),
                ('value', models.JSONField(blank=True, help_text='JSON-Daten für den Aktionswert', null=True, verbose_name='Wert')),
                ('mqtt_command', models.TextField(blank=True, help_text='Gesendeter MQTT-Befehl (falls vorhanden)', null=True, verbose_name='MQTT-Befehl')),
                ('success_status', models.BooleanField(default=True, verbose_name='Erfolgsstatus')),
                ('error_message', models.TextField(blank=True, null=True, verbose_name='Fehlermeldung')),
            ],
            options={
                'verbose_name': 'Controller-Log',
                'verbose_name_plural': 'Controller-Logs',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='ResourceUsage',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('controller_type', models.CharField(max_length=50, verbose_name='Controller-Typ')),
                ('controller_id', models.UUIDField(verbose_name='Controller-ID')),
                ('resource_type', models.CharField(choices=[('water', 'Wasser'), ('electricity', 'Strom'), ('nutrient', 'Nährstoffe'), ('co2', 'CO₂'), ('other', 'Sonstiges')], max_length=50, verbose_name='Ressourcentyp')),
                ('date', models.DateField(verbose_name='Datum')),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Menge')),
                ('unit', models.CharField(help_text='z.B. l, kWh, kg, etc.', max_length=20, verbose_name='Einheit')),
                ('cost', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Kosten (€)')),
            ],
            options={
                'verbose_name': 'Ressourcenverbrauch',
                'verbose_name_plural': 'Ressourcenverbräuche',
                'ordering': ['-date'],
            },
        ),
        migrations.CreateModel(
            name='IrrigationController',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, verbose_name='Controller-Name')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Beschreibung')),
                ('is_active', models.BooleanField(default=True, verbose_name='Aktiv')),
                ('is_connected', models.BooleanField(default=False, verbose_name='Verbunden')),
                ('mqtt_topic_prefix', models.CharField(blank=True, help_text='Präfix für MQTT-Kommunikation, z.B. controller/irrigation/1', max_length=100, verbose_name='MQTT Topic-Präfix')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Erstellt am')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Aktualisiert am')),
                ('last_communication', models.DateTimeField(blank=True, null=True, verbose_name='Letzte Kommunikation')),
                ('pump_type', models.CharField(choices=[('drip', 'Tropfbewässerung'), ('sprinkler', 'Sprinkler'), ('flood', 'Flut'), ('mist', 'Vernebelung'), ('custom', 'Benutzerdefiniert')], default='drip', max_length=20, verbose_name='Pumpentyp')),
                ('water_source', models.CharField(blank=True, help_text='z.B. Tank 1, Hauptwasserleitung, etc.', max_length=100, null=True, verbose_name='Wasserquelle')),
                ('flow_rate', models.DecimalField(decimal_places=2, default=1.0, max_digits=8, validators=[django.core.validators.MinValueValidator(0.01)], verbose_name='Durchflussrate (l/min)')),
                ('max_volume_per_day', models.DecimalField(blank=True, decimal_places=2, help_text='Maximale Wassermenge pro Tag (0 für unbegrenzt)', max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(0.01)], verbose_name='Max. Volumen pro Tag (l)')),
                ('total_volume_used', models.DecimalField(decimal_places=2, default=0, max_digits=12, verbose_name='Gesamtverbrauch (l)')),
                ('schedule_type', models.CharField(choices=[('daily', 'Täglich'), ('weekly', 'Wöchentlich'), ('phase', 'Phasenbasiert'), ('sensor', 'Sensorgesteuert')], default='daily', max_length=20, verbose_name='Zeitplantyp')),
                ('sensor_feedback_enabled', models.BooleanField(default=False, help_text='Steuert die Bewässerung basierend auf Bodenfeuchtesensoren', verbose_name='Sensorrückmeldung aktiviert')),
                ('emergency_stop', models.BooleanField(default=False, help_text='Sofortiger Stopp aller Bewässerungsaktivitäten', verbose_name='Notfall-Stopp')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to='members.member', verbose_name='Erstellt von')),
                ('last_modified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_modified', to='members.member', verbose_name='Zuletzt bearbeitet von')),
                ('room', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_controllers', to='rooms.room', verbose_name='Raum')),
            ],
            options={
                'verbose_name': 'Bewässerungssteuerung',
                'verbose_name_plural': 'Bewässerungssteuerungen',
            },
        ),
        migrations.CreateModel(
            name='IrrigationSchedule',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('day_of_week', models.IntegerField(blank=True, choices=[(0, 'Montag'), (1, 'Dienstag'), (2, 'Mittwoch'), (3, 'Donnerstag'), (4, 'Freitag'), (5, 'Samstag'), (6, 'Sonntag')], help_text='Leer lassen für tägliche Wiederholung', null=True, verbose_name='Wochentag')),
                ('phase_day', models.IntegerField(blank=True, help_text='Tag in der Wachstumsphase (nur für phasenbasierte Pläne)', null=True, verbose_name='Phasentag')),
                ('start_time', models.TimeField(help_text='Uhrzeit für den Beginn der Bewässerung', verbose_name='Startzeit')),
                ('duration', models.IntegerField(default=5, help_text='Dauer der Bewässerung in Minuten', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(120)], verbose_name='Dauer (Minuten)')),
                ('volume', models.DecimalField(blank=True, decimal_places=2, help_text='Zu verabreichende Wassermenge (wenn leer, wird aus Durchflussrate und Dauer berechnet)', max_digits=8, null=True, validators=[django.core.validators.MinValueValidator(0.01)], verbose_name='Volumen (l)')),
                ('intensity', models.IntegerField(default=100, help_text='Prozentsatz der maximal möglichen Durchflussrate', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(100)], verbose_name='Intensität (%)')),
                ('repeated_cycles', models.IntegerField(default=1, help_text='Anzahl der Zyklen mit Pausen dazwischen', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)], verbose_name='Wiederholte Zyklen')),
                ('cycle_pause', models.IntegerField(default=5, help_text='Pausendauer zwischen wiederholten Zyklen', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(60)], verbose_name='Pause zwischen Zyklen (Minuten)')),
                ('is_active', models.BooleanField(default=True, verbose_name='Aktiv')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('controller', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='schedules', to='controller.irrigationcontroller', verbose_name='Bewässerungssteuerung')),
            ],
            options={
                'verbose_name': 'Bewässerungszeitplan',
                'verbose_name_plural': 'Bewässerungszeitpläne',
                'ordering': ['day_of_week', 'start_time'],
            },
        ),
        migrations.CreateModel(
            name='LightController',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, verbose_name='Controller-Name')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Beschreibung')),
                ('is_active', models.BooleanField(default=True, verbose_name='Aktiv')),
                ('is_connected', models.BooleanField(default=False, verbose_name='Verbunden')),
                ('mqtt_topic_prefix', models.CharField(blank=True, help_text='Präfix für MQTT-Kommunikation, z.B. controller/irrigation/1', max_length=100, verbose_name='MQTT Topic-Präfix')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Erstellt am')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Aktualisiert am')),
                ('last_communication', models.DateTimeField(blank=True, null=True, verbose_name='Letzte Kommunikation')),
                ('light_type', models.CharField(choices=[('led', 'LED'), ('hps', 'HPS (Natriumdampf)'), ('mh', 'MH (Metallhalogen)'), ('cfl', 'CFL (Energiesparlampe)'), ('mixed', 'Gemischt'), ('custom', 'Benutzerdefiniert')], default='led', max_length=20, verbose_name='Lichttyp')),
                ('max_power', models.IntegerField(default=600, validators=[django.core.validators.MinValueValidator(1)], verbose_name='Maximale Leistung (W)')),
                ('spectrum_type', models.CharField(blank=True, help_text='z.B. Vollspektrum, Blüte, Vegetativ, etc.', max_length=100, verbose_name='Spektrumtyp')),
                ('supports_dimming', models.BooleanField(default=True, verbose_name='Dimmen unterstützt')),
                ('supports_spectrum_control', models.BooleanField(default=False, verbose_name='Spektrumkontrolle unterstützt')),
                ('cycle_type', models.CharField(choices=[('auto', 'Automatisch'), ('veg', 'Vegetativ (18/6)'), ('flower', 'Blüte (12/12)'), ('seedling', 'Sämling (20/4)'), ('clone', 'Klon (24/0)'), ('custom', 'Benutzerdefiniert')], default='veg', max_length=20, verbose_name='Zyklustyp')),
                ('current_day_in_cycle', models.IntegerField(default=1, validators=[django.core.validators.MinValueValidator(1)], verbose_name='Aktueller Tag im Zyklus')),
                ('cycle_start_date', models.DateField(default=django.utils.timezone.now, verbose_name='Zyklusstartdatum')),
                ('auto_increment_day', models.BooleanField(default=True, help_text='Erhöht den Tag im Zyklus automatisch um Mitternacht', verbose_name='Tag automatisch erhöhen')),
                ('emergency_off', models.BooleanField(default=False, help_text='Sofortiges Ausschalten aller Lichter', verbose_name='Notfall-Aus')),
                ('energy_consumption', models.DecimalField(decimal_places=2, default=0, max_digits=10, verbose_name='Energieverbrauch (kWh)')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to='members.member', verbose_name='Erstellt von')),
                ('last_modified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_modified', to='members.member', verbose_name='Zuletzt bearbeitet von')),
                ('room', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_controllers', to='rooms.room', verbose_name='Raum')),
            ],
            options={
                'verbose_name': 'Lichtsteuerung',
                'verbose_name_plural': 'Lichtsteuerungen',
            },
        ),
        migrations.CreateModel(
            name='LightSchedule',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, verbose_name='Zyklusname')),
                ('day_in_cycle', models.IntegerField(validators=[django.core.validators.MinValueValidator(1)], verbose_name='Tag im Zyklus')),
                ('is_active', models.BooleanField(default=True, verbose_name='Aktiv')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('controller', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='schedules', to='controller.lightcontroller', verbose_name='Lichtsteuerung')),
            ],
            options={
                'verbose_name': 'Lichtzeitplan',
                'verbose_name_plural': 'Lichtzeitpläne',
                'ordering': ['day_in_cycle'],
                'unique_together': {('controller', 'day_in_cycle')},
            },
        ),
        migrations.CreateModel(
            name='LightSchedulePoint',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('time_point', models.TimeField(help_text='Uhrzeit für die Lichteinstellung', verbose_name='Zeitpunkt')),
                ('intensity', models.IntegerField(default=100, help_text='Prozentsatz der maximalen Helligkeit (0 = aus)', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Intensität (%)')),
                ('spectrum_red', models.IntegerField(default=100, help_text='Intensität des roten Spektrumbereichs', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Rot-Spektrum (%)')),
                ('spectrum_blue', models.IntegerField(default=100, help_text='Intensität des blauen Spektrumbereichs', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Blau-Spektrum (%)')),
                ('transition_duration', models.IntegerField(default=0, help_text='Dauer des sanften Übergangs (0 = sofort)', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(120)], verbose_name='Übergangszeit (Minuten)')),
                ('schedule', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='points', to='controller.lightschedule', verbose_name='Lichtzeitplan')),
            ],
            options={
                'verbose_name': 'Lichtzeitpunkt',
                'verbose_name_plural': 'Lichtzeitpunkte',
                'ordering': ['time_point'],
            },
        ),
    ]
