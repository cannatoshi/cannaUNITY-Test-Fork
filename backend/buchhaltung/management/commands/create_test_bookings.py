from django.core.management.base import BaseCommand
from django.utils.timezone import now, timedelta
from decimal import Decimal
import random
from datetime import date, datetime
from buchhaltung.models import Booking, SubTransaction, Account
from buchhaltung.utils import generate_booking_number

class Command(BaseCommand):
    help = "Erstellt 10 realistische Testbuchungen f√ºr einen Monat"

    def handle(self, *args, **kwargs):
        self.stdout.write("üöÄ L√∂sche alte Buchungen...")
        Booking.objects.all().delete()
        self.stdout.write(self.style.SUCCESS("‚úÖ Alle alten Buchungen wurden gel√∂scht!"))

        # Konten zur√ºcksetzen
        self.stdout.write("üîÑ Setze Kontosalden zur√ºck...")
        for konto in Account.objects.all():
            konto.saldo = Decimal("0.00")
            konto.save(update_fields=["saldo"])
        self.stdout.write(self.style.SUCCESS("‚úÖ Alle Kontosalden wurden zur√ºckgesetzt!"))

        self.stdout.write("üìå Erstelle 10 realistische Buchungen f√ºr diesen Monat...")

        # Konten laden
        konten_dict = {konto.kontonummer: konto for konto in Account.objects.all()}

        # Aktueller Monat
        today = now().date()
        start_date = today.replace(day=1)

        # 1Ô∏è‚É£ Mitgliedsbeitr√§ge (Einnahme)
        self.create_booking(
            "4000", "Mitgliedsbeitr√§ge", Decimal("5500.00"), konten_dict, start_date + timedelta(days=3)
        )

        # 2Ô∏è‚É£ Miete (Ausgabe)
        self.create_booking(
            "5100", "Miete f√ºr Vereinsgeb√§ude", Decimal("2800.00"), konten_dict, start_date + timedelta(days=5), ausgabe=True
        )

        # 3Ô∏è‚É£ Stromkosten (Ausgabe)
        self.create_booking(
            "5130", "Stromkosten", Decimal("600.00"), konten_dict, start_date + timedelta(days=7), ausgabe=True
        )

        # 4Ô∏è‚É£ Wasser (Ausgabe)
        self.create_booking(
            "5120", "Wassergeb√ºhren", Decimal("200.00"), konten_dict, start_date + timedelta(days=9), ausgabe=True
        )

        # 5Ô∏è‚É£ Seminar-Einnahmen
        self.create_booking(
            "4020", "Seminargeb√ºhren", Decimal("1800.00"), konten_dict, start_date + timedelta(days=11)
        )

        # 6Ô∏è‚É£ D√ºngemittel & N√§hrstoffe (Ausgabe)
        self.create_booking(
            "5020", "Einkauf D√ºngemittel", Decimal("300.00"), konten_dict, start_date + timedelta(days=13), ausgabe=True
        )

        # 7Ô∏è‚É£ Verkauf von Stecklingen (Einnahme)
        self.create_booking(
            "4010", "Erl√∂se aus Stecklingsverkauf", Decimal("3200.00"), konten_dict, start_date + timedelta(days=15)
        )

        # 8Ô∏è‚É£ Internetkosten (Ausgabe)
        self.create_booking(
            "5480", "Internetkosten", Decimal("150.00"), konten_dict, start_date + timedelta(days=17), ausgabe=True
        )

        # 9Ô∏è‚É£ B√ºrobedarf (Ausgabe)
        self.create_booking(
            "3210", "B√ºromaterial", Decimal("120.00"), konten_dict, start_date + timedelta(days=19), ausgabe=True
        )

        # üîü Reinigungsdienstleistung (Ausgabe)
        self.create_booking(
            "6900", "Reinigungsservice Vereinsgeb√§ude", Decimal("250.00"), konten_dict, start_date + timedelta(days=21), ausgabe=True
        )

        # Abschlussmeldung
        self.stdout.write(self.style.SUCCESS("\nüéâ 10 Buchungen erfolgreich erstellt!"))

    def create_booking(self, konto, verwendungszweck, betrag, konten_dict, datum, ausgabe=False):
        """
        Erstellt eine einzelne Buchung mit Soll- und Haben-Konto
        """
        buchungsnummer = generate_booking_number()
        booking = Booking.objects.create(
            buchungsnummer=buchungsnummer,
            typ="EINZEL",
            verwendungszweck=verwendungszweck,
            datum=datetime.combine(datum, datetime.min.time()).replace(tzinfo=now().tzinfo)
        )

        soll_konto = konten_dict[konto] if ausgabe else konten_dict["1200"]
        haben_konto = konten_dict["1200"] if ausgabe else konten_dict[konto]

        SubTransaction.objects.create(
            booking=booking,
            betrag=betrag,
            soll_konto=soll_konto,
            haben_konto=haben_konto,
            verwendungszweck=verwendungszweck
        )

        # Salden aktualisieren
        soll_konto.saldo += betrag if ausgabe else -betrag
        haben_konto.saldo += -betrag if ausgabe else betrag
        soll_konto.save(update_fields=["saldo"])
        haben_konto.save(update_fields=["saldo"])

        self.stdout.write(self.style.SUCCESS(
            f"‚úÖ {datum.strftime('%d.%m.%Y')} - {verwendungszweck}: {betrag} ‚Ç¨"
        ))
